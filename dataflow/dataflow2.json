{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText22",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText23",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText24",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Empid as string,",
				"          Empname as string,",
				"          Gender as string,",
				"          Country as string,",
				"          Department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 cast(output(",
				"          Department as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive(Errorrows = isError()) ~> derivedColumn1",
				"derivedColumn1 split(!isError(),",
				"     disjoint: false) ~> split1@(Goodrows, badrows)",
				"split1@Goodrows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['emptranformed.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Empid,",
				"          Empname,",
				"          Gender,",
				"          Country,",
				"          Department,",
				"          Errorrows",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@badrows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['emptransformedbad.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Empid,",
				"          Empname,",
				"          Gender,",
				"          Country,",
				"          Department,",
				"          Errorrows",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}