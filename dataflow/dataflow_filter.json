{
	"name": "dataflow_filter",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Employeedataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Deptdataset",
						"type": "DatasetReference"
					},
					"name": "dept"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Employeeoutputdataset",
						"type": "DatasetReference"
					},
					"name": "Sink"
				}
			],
			"transformations": [
				{
					"name": "sort1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "Conditionalsplit"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Empid as string,",
				"          Empname as string,",
				"          Country as string,",
				"          Department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          DepID as string,",
				"          DepartmentName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dept",
				"select1 sort(asc(Empname, true)) ~> sort1",
				"source1, dept join(Department == DepID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> join1",
				"Conditionalsplit@ITEmployees select(mapColumn(",
				"          Empid,",
				"          Empname,",
				"          Country,",
				"          DepID,",
				"          DepartmentName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"join1 split(equals(Department,'1'),",
				"     equals(Department,'2'),",
				"     equals(Department,'3'),",
				"     disjoint: false) ~> Conditionalsplit@(ITEmployees, HREmployess, Payrollemployees)",
				"Conditionalsplit@ITEmployees, Conditionalsplit@HREmployess, Conditionalsplit@Payrollemployees union(byName: true)~> union1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Sink"
			]
		}
	}
}